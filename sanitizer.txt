diff --git a/configure b/configure
index 9c2d7df1bb2..103a59627b0 100755
--- a/configure
+++ b/configure
@@ -17304,7 +17304,7 @@ else
 fi
 
 
-RAW_CXX_FOR_TARGET="$CXX_FOR_TARGET"
+RAW_CXX_FOR_TARGET="$CXX_FOR_TARGET -nostdinc++"
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking where to find the target ar" >&5
 $as_echo_n "checking where to find the target ar... " >&6; }
diff --git a/libsanitizer/asan/asan_malloc_win.cpp b/libsanitizer/asan/asan_malloc_win.cpp
index 4b76d4ebd3e..f1f968f1aca 100644
--- a/libsanitizer/asan/asan_malloc_win.cpp
+++ b/libsanitizer/asan/asan_malloc_win.cpp
@@ -39,7 +39,9 @@ constexpr unsigned long HEAP_FREE_UNSUPPORTED_FLAGS =
     (~HEAP_ALLOCATE_SUPPORTED_FLAGS);
 constexpr unsigned long HEAP_REALLOC_UNSUPPORTED_FLAGS =
     (~HEAP_ALLOCATE_SUPPORTED_FLAGS);
-
+#if !defined(WINAPI)
+#define WINAPI __stdcall
+#endif
 
 extern "C" {
 LPVOID WINAPI HeapAlloc(HANDLE hHeap, DWORD dwFlags, size_t dwBytes);
diff --git a/libsanitizer/asan/asan_win.cpp b/libsanitizer/asan/asan_win.cpp
index 1577c83cf99..96887a1f557 100644
--- a/libsanitizer/asan/asan_win.cpp
+++ b/libsanitizer/asan/asan_win.cpp
@@ -246,7 +246,7 @@ void PlatformTSDDtor(void *tsd) { AsanThread::TSDDtor(tsd); }
 
 // ---------------------- Various stuff ---------------- {{{
 void *AsanDoesNotSupportStaticLinkage() {
-#if defined(_DEBUG)
+#if defined(_DEBUG) && !defined(__MINGW32__)
 #error Please build the runtime with a non-debug CRT: /MD or /MT
 #endif
   return 0;
diff --git a/libsanitizer/sanitizer_common/sanitizer_internal_defs.h b/libsanitizer/sanitizer_common/sanitizer_internal_defs.h
index e97cc9ac0df..6c9fdc6e3f0 100644
--- a/libsanitizer/sanitizer_common/sanitizer_internal_defs.h
+++ b/libsanitizer/sanitizer_common/sanitizer_internal_defs.h
@@ -55,7 +55,7 @@
 // For example:
 //   SANITIZER_INTERFACE_WEAK_DEF(bool, compare, int a, int b) { return a > b; }
 //
-#if SANITIZER_WINDOWS
+#if SANITIZER_WINDOWS && !defined(__GNUC__)
 #include "sanitizer_win_defs.h"
 # define SANITIZER_INTERFACE_WEAK_DEF(ReturnType, Name, ...)                   \
   WIN_WEAK_EXPORT_DEF(ReturnType, Name, __VA_ARGS__)
diff --git a/libsanitizer/sanitizer_common/sanitizer_win_defs.h b/libsanitizer/sanitizer_common/sanitizer_win_defs.h
index bfe38a33236..c73577662dd 100644
--- a/libsanitizer/sanitizer_common/sanitizer_win_defs.h
+++ b/libsanitizer/sanitizer_common/sanitizer_win_defs.h
@@ -64,7 +64,11 @@
 // result in a link error (the linker doesn't find the pragma directive).
 // So, a workaround is to force linkage with the modules that include weak
 // definitions, with the following macro: WIN_FORCE_LINK()
-
+#if defined(__GNUC__)
+#define WIN_WEAK_ALIAS(Name, Default)
+#define WIN_FORCE_LINK(Name)
+#define WIN_EXPORT(ExportedName, Name)
+#else
 #define WIN_WEAK_ALIAS(Name, Default)                                          \
   __pragma(comment(linker, "/alternatename:" WIN_SYM_PREFIX STRINGIFY(Name) "="\
                                              WIN_SYM_PREFIX STRINGIFY(Default)))
@@ -75,7 +79,7 @@
 #define WIN_EXPORT(ExportedName, Name)                                         \
   __pragma(comment(linker, "/export:" WIN_EXPORT_PREFIX STRINGIFY(ExportedName)\
                                   "=" WIN_EXPORT_PREFIX STRINGIFY(Name)))
-
+#endif
 // We cannot define weak functions on Windows, but we can use WIN_WEAK_ALIAS()
 // which defines an alias to a default implementation, and only works when
 // linking statically.
@@ -93,18 +97,27 @@
 // Use this macro when you need to define and export a weak function from a
 // library. For example:
 //   WIN_WEAK_EXPORT_DEF(bool, compare, int a, int b) { return a > b; }
+
+#if defined(__GNUC__)
+# define WIN_WEAK_EXPORT_DEF(ReturnType, Name, ...)                            \
+  extern "C" ReturnType Name(__VA_ARGS__)                                      \
+    __asm__(WIN_SYM_PREFIX STRINGIFY(Name));
+#else
 # define WIN_WEAK_EXPORT_DEF(ReturnType, Name, ...)                            \
   WIN_WEAK_ALIAS(Name, WEAK_DEFAULT_NAME(Name))                                \
   WIN_EXPORT(WEAK_EXPORT_NAME(Name), Name)                                     \
   extern "C" ReturnType Name(__VA_ARGS__);                                     \
   extern "C" ReturnType WEAK_DEFAULT_NAME(Name)(__VA_ARGS__)
-
+#endif
 // Use this macro when you need to import a weak function from a library. It
 // defines a weak alias to the imported function from the dll. For example:
 //   WIN_WEAK_IMPORT_DEF(compare)
+#if defined(__GNUC__)
+# define WIN_WEAK_IMPORT_DEF(Name)
+#else
 # define WIN_WEAK_IMPORT_DEF(Name)                                             \
   WIN_WEAK_ALIAS(Name, WEAK_EXPORT_NAME(Name))
-
+#endif
 // So, for Windows we provide something similar to weak symbols in Linux, with
 // some differences:
 // + A default implementation must always be provided.
@@ -171,4 +184,5 @@
 #endif // SANITIZER_GO
 
 #endif // SANITIZER_WINDOWS
+
 #endif // SANITIZER_WIN_DEFS_H
diff --git a/libsanitizer/ubsan/ubsan_handlers.cpp b/libsanitizer/ubsan/ubsan_handlers.cpp
index 2184625aa6e..232df1e69f2 100644
--- a/libsanitizer/ubsan/ubsan_handlers.cpp
+++ b/libsanitizer/ubsan/ubsan_handlers.cpp
@@ -870,7 +870,22 @@ namespace __ubsan {
 #ifdef UBSAN_CAN_USE_CXXABI
 
 #ifdef _WIN32
+#if defined(__GNUC__)
+extern "C" void __ubsan_handle_cfi_bad_type_default(CFICheckFailData *Data,
+                                                    ValueHandle Vtable,
+                                                    bool ValidVtable,
+                                                    ReportOptions Opts)
+{
+  Die();
+}
 
+extern "C" void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data,
+                                                    ValueHandle Vtable,
+                                                    bool ValidVtable,
+                                                    ReportOptions Opts)
+__asm__("__ubsan_handle_cfi_bad_type_default");
+
+#else
 extern "C" void __ubsan_handle_cfi_bad_type_default(CFICheckFailData *Data,
                                                     ValueHandle Vtable,
                                                     bool ValidVtable,
@@ -879,6 +894,7 @@ extern "C" void __ubsan_handle_cfi_bad_type_default(CFICheckFailData *Data,
 }
 
 WIN_WEAK_ALIAS(__ubsan_handle_cfi_bad_type, __ubsan_handle_cfi_bad_type_default)
+#endif
 #else
 SANITIZER_WEAK_ATTRIBUTE
 #endif
