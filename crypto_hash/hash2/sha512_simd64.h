#pragma once

#if __has_cpp_attribute(gnu::flatten)
[[gnu::flatten]]
#endif
inline void sha512_simd64(std::uint_least64_t* __restrict state,std::byte const* __restrict blocks_start,std::byte const* __restrict blocks_last) noexcept
{
	using namespace fast_io::intrinsics;
	using namespace fast_io::details::sha512;

	simd_vector<std::uint_least64_t,8> simd,simd_temp;
	constexpr simd_vector<char,64> byteswap_simd{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24,39,38,37,36,35,34,33,32,47,46,45,44,43,42,41,40,55,54,53,52,51,50,49,48,63,62,61,60,59,58,57,56};

	constexpr bool is_little_endian{std::endian::native==std::endian::little};

	std::uint_least64_t wt[80];
	std::uint_least64_t w[80];
	std::uint_least64_t a{state[0]};
	std::uint_least64_t b{state[1]};
	std::uint_least64_t c{state[2]};
	std::uint_least64_t d{state[3]};
	std::uint_least64_t e{state[4]};
	std::uint_least64_t f{state[5]};
	std::uint_least64_t g{state[6]};
	std::uint_least64_t h{state[7]};
	std::uint_least64_t sigma1wm2;

	for(;blocks_start!=blocks_last;blocks_start+=128)
	{
		simd.load(blocks_start);
		simd_temp.load(K512);
		if constexpr(is_little_endian)
			simd.shuffle(byteswap_simd);
		simd.store(w);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt);

		sha512_scalar_round(wt[0],a,b,c,d,e,f,g,h);
		sha512_scalar_round(wt[1],h,a,b,c,d,e,f,g);
		sha512_scalar_round(wt[2],g,h,a,b,c,d,e,f);
		sha512_scalar_round(wt[3],f,g,h,a,b,c,d,e);
		sha512_scalar_round(wt[4],e,f,g,h,a,b,c,d);
		sha512_scalar_round(wt[5],d,e,f,g,h,a,b,c);
		sha512_scalar_round(wt[6],c,d,e,f,g,h,a,b);
		sha512_scalar_round(wt[7],b,c,d,e,f,g,h,a);
		simd.load(blocks_start+64);
		simd_temp.load(K512+8);
		if constexpr(is_little_endian)
			simd.shuffle(byteswap_simd);
		simd.store(w+8);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+8);

		sigma1wm2=sigma1(w[6]);
		w[8]+=sigma1wm2;
		sha512_scalar_round(wt[8]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[7]);
		w[9]+=sigma1wm2;
		sha512_scalar_round(wt[9]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[8]);
		w[10]+=sigma1wm2;
		sha512_scalar_round(wt[10]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[9]);
		w[11]+=sigma1wm2;
		sha512_scalar_round(wt[11]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[10]);
		w[12]+=sigma1wm2;
		sha512_scalar_round(wt[12]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[11]);
		w[13]+=sigma1wm2;
		sha512_scalar_round(wt[13]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[12]);
		w[14]+=sigma1wm2;
		sha512_scalar_round(wt[14]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[13]);
		w[15]+=sigma1wm2;
		sha512_scalar_round(wt[15]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+1);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+9);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+16);
		simd_temp.load(K512+16);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+16);

		sigma1wm2=sigma1(w[14]);
		w[16]+=sigma1wm2;
		sha512_scalar_round(wt[16]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[15]);
		w[17]+=sigma1wm2;
		sha512_scalar_round(wt[17]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[16]);
		w[18]+=sigma1wm2;
		sha512_scalar_round(wt[18]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[17]);
		w[19]+=sigma1wm2;
		sha512_scalar_round(wt[19]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[18]);
		w[20]+=sigma1wm2;
		sha512_scalar_round(wt[20]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[19]);
		w[21]+=sigma1wm2;
		sha512_scalar_round(wt[21]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[20]);
		w[22]+=sigma1wm2;
		sha512_scalar_round(wt[22]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[21]);
		w[23]+=sigma1wm2;
		sha512_scalar_round(wt[23]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+9);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+8);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+17);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+24);
		simd_temp.load(K512+24);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+24);

		sigma1wm2=sigma1(w[22]);
		w[24]+=sigma1wm2;
		sha512_scalar_round(wt[24]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[23]);
		w[25]+=sigma1wm2;
		sha512_scalar_round(wt[25]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[24]);
		w[26]+=sigma1wm2;
		sha512_scalar_round(wt[26]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[25]);
		w[27]+=sigma1wm2;
		sha512_scalar_round(wt[27]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[26]);
		w[28]+=sigma1wm2;
		sha512_scalar_round(wt[28]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[27]);
		w[29]+=sigma1wm2;
		sha512_scalar_round(wt[29]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[28]);
		w[30]+=sigma1wm2;
		sha512_scalar_round(wt[30]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[29]);
		w[31]+=sigma1wm2;
		sha512_scalar_round(wt[31]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+17);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+16);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+25);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+32);
		simd_temp.load(K512+32);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+32);

		sigma1wm2=sigma1(w[30]);
		w[32]+=sigma1wm2;
		sha512_scalar_round(wt[32]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[31]);
		w[33]+=sigma1wm2;
		sha512_scalar_round(wt[33]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[32]);
		w[34]+=sigma1wm2;
		sha512_scalar_round(wt[34]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[33]);
		w[35]+=sigma1wm2;
		sha512_scalar_round(wt[35]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[34]);
		w[36]+=sigma1wm2;
		sha512_scalar_round(wt[36]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[35]);
		w[37]+=sigma1wm2;
		sha512_scalar_round(wt[37]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[36]);
		w[38]+=sigma1wm2;
		sha512_scalar_round(wt[38]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[37]);
		w[39]+=sigma1wm2;
		sha512_scalar_round(wt[39]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+25);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+24);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+33);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+40);
		simd_temp.load(K512+40);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+40);

		sigma1wm2=sigma1(w[38]);
		w[40]+=sigma1wm2;
		sha512_scalar_round(wt[40]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[39]);
		w[41]+=sigma1wm2;
		sha512_scalar_round(wt[41]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[40]);
		w[42]+=sigma1wm2;
		sha512_scalar_round(wt[42]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[41]);
		w[43]+=sigma1wm2;
		sha512_scalar_round(wt[43]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[42]);
		w[44]+=sigma1wm2;
		sha512_scalar_round(wt[44]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[43]);
		w[45]+=sigma1wm2;
		sha512_scalar_round(wt[45]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[44]);
		w[46]+=sigma1wm2;
		sha512_scalar_round(wt[46]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[45]);
		w[47]+=sigma1wm2;
		sha512_scalar_round(wt[47]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+33);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+32);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+41);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+48);
		simd_temp.load(K512+48);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+48);

		sigma1wm2=sigma1(w[46]);
		w[48]+=sigma1wm2;
		sha512_scalar_round(wt[48]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[47]);
		w[49]+=sigma1wm2;
		sha512_scalar_round(wt[49]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[48]);
		w[50]+=sigma1wm2;
		sha512_scalar_round(wt[50]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[49]);
		w[51]+=sigma1wm2;
		sha512_scalar_round(wt[51]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[50]);
		w[52]+=sigma1wm2;
		sha512_scalar_round(wt[52]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[51]);
		w[53]+=sigma1wm2;
		sha512_scalar_round(wt[53]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[52]);
		w[54]+=sigma1wm2;
		sha512_scalar_round(wt[54]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[53]);
		w[55]+=sigma1wm2;
		sha512_scalar_round(wt[55]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+41);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+40);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+49);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+56);
		simd_temp.load(K512+56);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+56);

		sigma1wm2=sigma1(w[54]);
		w[56]+=sigma1wm2;
		sha512_scalar_round(wt[56]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[55]);
		w[57]+=sigma1wm2;
		sha512_scalar_round(wt[57]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[56]);
		w[58]+=sigma1wm2;
		sha512_scalar_round(wt[58]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[57]);
		w[59]+=sigma1wm2;
		sha512_scalar_round(wt[59]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[58]);
		w[60]+=sigma1wm2;
		sha512_scalar_round(wt[60]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[59]);
		w[61]+=sigma1wm2;
		sha512_scalar_round(wt[61]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[60]);
		w[62]+=sigma1wm2;
		sha512_scalar_round(wt[62]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[61]);
		w[63]+=sigma1wm2;
		sha512_scalar_round(wt[63]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+49);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+48);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+57);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+64);
		simd_temp.load(K512+64);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+64);

		sigma1wm2=sigma1(w[62]);
		w[64]+=sigma1wm2;
		sha512_scalar_round(wt[64]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[63]);
		w[65]+=sigma1wm2;
		sha512_scalar_round(wt[65]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[64]);
		w[66]+=sigma1wm2;
		sha512_scalar_round(wt[66]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[65]);
		w[67]+=sigma1wm2;
		sha512_scalar_round(wt[67]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[66]);
		w[68]+=sigma1wm2;
		sha512_scalar_round(wt[68]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[67]);
		w[69]+=sigma1wm2;
		sha512_scalar_round(wt[69]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[68]);
		w[70]+=sigma1wm2;
		sha512_scalar_round(wt[70]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[69]);
		w[71]+=sigma1wm2;
		sha512_scalar_round(wt[71]+sigma1wm2,b,c,d,e,f,g,h,a);
		simd.load(w+57);
		simd=(simd>>1)^(simd<<63)^(simd>>8)^(simd<<56)^(simd>>7);
		simd_temp.load(w+56);
		simd.wrap_add_assign(simd_temp);
		simd_temp.load(w+65);
		simd.wrap_add_assign(simd_temp);
		simd.store(w+72);
		simd_temp.load(K512+72);
		simd.wrap_add_assign(simd_temp);
		simd.store(wt+72);

		sigma1wm2=sigma1(w[70]);
		sha512_scalar_round(wt[72]+sigma1wm2,a,b,c,d,e,f,g,h);
		sigma1wm2=sigma1(w[71]);
		sha512_scalar_round(wt[73]+sigma1wm2,h,a,b,c,d,e,f,g);
		sigma1wm2=sigma1(w[72]);
		sha512_scalar_round(wt[74]+sigma1wm2,g,h,a,b,c,d,e,f);
		sigma1wm2=sigma1(w[73]);
		sha512_scalar_round(wt[75]+sigma1wm2,f,g,h,a,b,c,d,e);
		sigma1wm2=sigma1(w[74]);
		sha512_scalar_round(wt[76]+sigma1wm2,e,f,g,h,a,b,c,d);
		sigma1wm2=sigma1(w[75]);
		sha512_scalar_round(wt[77]+sigma1wm2,d,e,f,g,h,a,b,c);
		sigma1wm2=sigma1(w[76]);
		sha512_scalar_round(wt[78]+sigma1wm2,c,d,e,f,g,h,a,b);
		sigma1wm2=sigma1(w[77]);
		sha512_scalar_round(wt[79]+sigma1wm2,b,c,d,e,f,g,h,a);

		a=(*state+=a);
		b=(state[1]+=b);
		c=(state[2]+=c);
		d=(state[3]+=d);
		e=(state[4]+=e);
		f=(state[5]+=f);
		g=(state[6]+=g);
		h=(state[7]+=h);
	}
}
